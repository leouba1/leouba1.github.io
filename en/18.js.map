{"version":3,"sources":["./node_modules/@se/web-ui/esm/se-stepper_2.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAA6G;;AAE7G,wBAAwB,cAAc,iCAAiC,GAAG,oBAAoB,aAAa,aAAa,gBAAgB,YAAY,sBAAsB,2BAA2B,oBAAoB,sBAAsB,mBAAmB,6CAA6C,WAAW,OAAO,WAAW,kBAAkB,eAAe,iBAAiB,gBAAgB,WAAW,YAAY,mBAAmB,cAAc,qCAAqC,yBAAyB,mDAAmD,mBAAmB,wBAAwB,eAAe,gBAAgB,yBAAyB,4BAA4B,eAAe,kBAAkB,WAAW,gCAAgC,yBAAyB,SAAS,yEAAyE,yBAAyB,SAAS,cAAc,oBAAoB,aAAa,sBAAsB,mBAAmB,mBAAmB,eAAe,uBAAuB,eAAe,uBAAuB,oBAAoB,uDAAuD,gBAAgB,oBAAoB,eAAe,cAAc,wCAAwC,eAAe,gBAAgB,iBAAiB,aAAa,WAAW,WAAW,iBAAiB,iBAAiB,WAAW,8BAA8B,yBAAyB,4CAA4C,uCAAuC,wBAAwB,kCAAkC,yBAAyB,gDAAgD,cAAc,iCAAiC,2CAA2C,cAAc,qCAAqC;;AAEpxD;AACA;AACA,IAAI,4DAAgB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAC,QAAQ;AACjB;AACA;AACA;AACA;AACA,WAAW,EAAE,EAAE,4DAAC,SAAS;AACzB;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE,EAAE,4DAAC,UAAU;AAC1B;AACA;AACA,WAAW,EAAE,aAAa,4DAAC,UAAU,8BAA8B,yDAAyD,4DAAC,gBAAgB,SAAS,oBAAoB,EAAE;AAC5K;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,oCAAoC,kBAAkB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,4DAAC,SAAS,oBAAoB,EAAE,4DAAC;AACvC,MAAM,4DAAC;AACP;AACA;AACA,YAAY,QAAQ,4DAAU,OAAO;AACrC;AACA;;AAEA,+CAA+C,wBAAwB;;AAEvE;AACA;AACA,IAAI,4DAAgB;AACpB,uBAAuB,4DAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAC,CAAC,oDAAI,GAAG,+DAA+D,EAAE,4DAAC;AACvF;AACA,yBAAyB;AACzB;AACA,IAAI;AACJ;AACA;;AAEmF","file":"18.js","sourcesContent":["import { r as registerInstance, h, g as getElement, c as createEvent, H as Host } from './index-3d6c5e6f.js';\n\nconst stepperCss = \"nav{color:#3dcd58;color:var(--se-primary, #3dcd58)}ol{display:-ms-flexbox;display:flex;padding:16px;margin-bottom:0;height:24px}.stepper-item-wrapper{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center}.stepper-item-wrapper.block:not(:last-child){-ms-flex:1;flex:1}.indicator{text-align:center;font-size:14px;line-height:24px;font-weight:700;width:24px;height:24px;border-radius:100%;color:#ffffff;color:var(--se-alternative, #ffffff);background-color:#494b50;background-color:var(--se-standard-hover, #494b50)}.indicator.se-icon{font-family:\\\"se-icon\\\";font-size:24px;font-weight:400}.indicator.se-icon:after{content:\\\"notification_ok\\\";font-size:32px;position:relative;right:28px}@supports (-ms-ime-align: auto){.indicator.se-icon:after{top:1px}}@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none){.indicator.se-icon:after{top:1px}}.stepper-item{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;white-space:nowrap;cursor:pointer}.stepper-item.readonly{cursor:default}.stepper-item.disabled{pointer-events:none}.stepper-item:not(.readonly) .stepper-item-label:hover{font-weight:400}.stepper-item-label{display:inline;color:#494b50;color:var(--se-standard-hover, #494b50);font-size:16px;font-weight:700;line-height:19px;margin:0 8px}se-divider{width:25px;margin-right:8px}se-divider.block{width:100%}.primary .selected .indicator{background-color:#3dcd58;background-color:var(--se-primary, #3dcd58)}.primary .selected .stepper-item-label{color:var(--se-focus, )}.alternative .selected .indicator{background-color:#ffffff;background-color:var(--se-alternative, #ffffff);color:#3dcd58;color:var(--se-primary, #3dcd58)}.alternative .selected .stepper-item-label{color:#ffffff;color:var(--se-alternative, #ffffff)}\";\n\nconst StepperComponent = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.stepperItems = [];\n    /**\n     * Sets the background color of your stepper.\n     * The default setting is `primary`, implementing a green background for the stepper visual items.\n     * The `alternative` setting implements a white background for the stepper visual items. This setting is best used against a gray background.\n     */\n    this.color = 'primary';\n    /**\n     * Defines if the stepper items must be completed sequentially.\n     * The default setting is `true`, each stepper item must be validated before advancing to the next step.\n     * `false` allows each step to be selected in any order.\n     */\n    this.linear = true;\n    /**\n     * Defines if the stepper takes the whole space.\n     */\n    this.block = false;\n    /**\n     * Defines if the stepper items is interactive or not.\n     * The default setting is `true`, each stepper item can be interacted with. `linear` keeps its same interaction limitation.\n     * `false` disabled the interactivness. It overrides the individual stepper item `interactive` property.\n     */\n    this.interactive = true;\n  }\n  /**\n   * Call the `reset` method to reset the stepper to the indicated step.  This also invalidates any validated steps.\n   * It no step parameter is provided, it will reset to the first stepper item.\n   */\n  async reset(step = 1) {\n    if (step >= this.getItemStep(this.selectedItem)) {\n      return; // don't advance the stepper when clicking the reset button\n    }\n    this.stepperItems.forEach((item) => {\n      if (this.getItemStep(item) >= step) {\n        item.validated = false;\n      }\n    });\n    this.selectStep(this.stepperItems[step - 1]);\n  }\n  /**\n   * Call the `previous` method to navigate to the previous step from the step that is currently selected.\n   */\n  async previous() {\n    // do not trigger this method when the first stepper item is the active item\n    if (this.getItemStep(this.selectedItem) > 1) {\n      const index = this.stepperItems.indexOf(this.selectedItem);\n      this.selectStep(this.stepperItems[index - 1]);\n    }\n  }\n  /**\n   * Call the `next` method to navigate to the next step from the step that is currently selected.\n   * This will not work in linear mode if the next step is not validated.\n   */\n  async next(validate) {\n    if (validate) {\n      this.selectedItem.validated = true;\n    }\n    if (!this.linear || this.selectedItem.validated) {\n      const index = this.stepperItems.indexOf(this.selectedItem);\n      this.selectStep(this.stepperItems[index + 1]);\n    }\n  }\n  onItemClicked(item) {\n    if (!this.canItemBeSelected(item)) {\n      return;\n    }\n    this.selectStep(item);\n  }\n  selectStep(item) {\n    if (this.selectedItem) {\n      this.selectedItem.active = false;\n    }\n    this.selectedItem = item;\n    this.selectedItem.active = true;\n  }\n  itemValidated(value) {\n    this.validatedChanged = value;\n  }\n  getItemStep(item) {\n    return this.stepperItems.indexOf(item) + 1;\n  }\n  checkIfPreviousItemValidated(item) {\n    if (this.getItemStep(item) > 1 && this.linear) {\n      return this.stepperItems[this.stepperItems.indexOf(item) - 1].validated;\n    }\n    return true;\n  }\n  canItemBeSelected(item) {\n    if (!this.linear || item.validated || this.getItemStep(item) === 1) {\n      return true;\n    }\n    const itemIndex = this.stepperItems.indexOf(item);\n    const previousItems = this.stepperItems.slice(0, itemIndex);\n    return previousItems.every((_item) => _item.validated);\n  }\n  renderList() {\n    return this.stepperItems.map((item) => {\n      const itemStep = this.getItemStep(item);\n      const isReadOnly = !(this.interactive && item.interactive);\n      return [\n        h(\"li\", { class: {\n            'stepper-item-wrapper': true,\n            block: this.block,\n            selected: this.getItemStep(this.selectedItem) === itemStep ||\n              item.validated,\n          } }, h(\"div\", { class: {\n            'stepper-item': true,\n            disabled: !this.checkIfPreviousItemValidated(item),\n            readonly: isReadOnly,\n          }, onClick: event => {\n            if (isReadOnly) {\n              event.preventDefault();\n              return;\n            }\n            this.selectStep(item);\n          } }, h(\"span\", { class: {\n            indicator: true,\n            'se-icon': item.validated && !item.active,\n          } }, itemStep), h(\"span\", { class: \"stepper-item-label\" }, item.label)), itemStep !== this.stepperItems.length ? (h(\"se-divider\", { class: { block: this.block } })) : ('')),\n      ];\n    });\n  }\n  watchItemList() {\n    this.observer = new MutationObserver(mutations => {\n      mutations.forEach(mutation => {\n        if (mutation.addedNodes.length) {\n          this.setItemsArray();\n        }\n        if (mutation.removedNodes.length) {\n          this.setItemsArray();\n        }\n      });\n    });\n    this.observer.observe(this.el, { childList: true });\n  }\n  setItemsArray() {\n    this.stepperItems = Array.from(this.el.querySelectorAll('se-stepper-item'));\n    let previousItemValidated = true;\n    this.stepperItems.forEach((item) => {\n      item.interactive =\n        item.interactive === undefined ? true : !!item.interactive;\n      if (this.linear) {\n        item.validated = !!item.validated && previousItemValidated;\n      }\n      previousItemValidated = item.validated;\n    });\n    const selectionnableItems = this.stepperItems.filter(this.canItemBeSelected.bind(this));\n    const selectedItem = selectionnableItems.reverse().find((item) => item.active) ||\n      selectionnableItems.find((item) => !item.validated) ||\n      this.stepperItems[0];\n    this.stepperItems.forEach((item) => {\n      item.active = selectedItem === item;\n    });\n    this.selectStep(selectedItem);\n  }\n  componentDidLoad() {\n    this.setItemsArray();\n    this.watchItemList();\n  }\n  disconnectedCallback() {\n    this.stepperItems.length = 0;\n    this.selectedItem = undefined;\n    this.observer.disconnect();\n  }\n  render() {\n    return [\n      h(\"nav\", { class: this.color }, h(\"ol\", null, this.renderList())),\n      h(\"slot\", null),\n    ];\n  }\n  get el() { return getElement(this); }\n};\nStepperComponent.style = stepperCss;\n\nconst stepperItemCss = \":host(.navitem-hidden){display:none !important}\";\n\nconst StepperItemComponent = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.didValidate = createEvent(this, \"didValidate\", 7);\n    /**\n     * Indicates if the stepper item is interactive or not.\n     * The default setting is `true`, the stepper item can be interacted with.\n     * `false` disabled the interactivness.\n     */\n    this.interactive = true;\n  }\n  validatedDidChange() {\n    this.didValidate.emit(this.validated);\n  }\n  render() {\n    return (h(Host, { class: [this.active ? 'active' : 'navitem-hidden'].join(' ') }, h(\"slot\", null)));\n  }\n  static get watchers() { return {\n    \"validated\": [\"validatedDidChange\"]\n  }; }\n};\nStepperItemComponent.style = stepperItemCss;\n\nexport { StepperComponent as se_stepper, StepperItemComponent as se_stepper_item };\n"],"sourceRoot":"webpack:///"}