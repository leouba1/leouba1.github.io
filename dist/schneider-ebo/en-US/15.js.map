{"version":3,"sources":["./node_modules/@se/web-ui/esm/se-list_3.entry.js"],"names":[],"mappings":"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","file":"15.js","sourcesContent":["import { r as registerInstance, h, H as Host, g as getElement, c as createEvent } from './index-3d6c5e6f.js';\nimport { a as arrow2Up } from './arrow2_up-7bd71b43.js';\nimport { a as arrow2Right } from './arrow2_right-506c18fe.js';\nimport { i as isVisible } from './utils-7cccd915.js';\n\nconst listCss = \":host{width:100%;height:100%;position:relative;overflow:auto;-webkit-box-direction:normal;-webkit-box-orient:vertical;-webkit-flex-direction:column;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;display:-ms-flexbox;display:-webkit-flex;display:flex;--se-list-group-height:47px;--se-list-group-background:inherit;--se-list-group-indentation:0;--se-list-group-font-weight:inherit;--se-list-item-height:47px;--se-list-item-border-bottom:1px solid;--se-list-item-selected-bar:var(--se-standard);--se-list-item-selected-background:var(--se-alternative-selected);--se-list-item-selected-color:inherit;--se-list-item-indentation-padding:24px}:host(.selected-primary){--se-list-item-selected-bar:var(--se-primary)}:host(.classic){--se-list-group-font-weight:500}:host(.dropdown){--se-list-item-height:32px;--se-list-group-height:32px;--se-list-item-border-bottom:none}:host(.treeview){--se-list-item-height:32px;--se-list-group-height:32px;--se-list-item-indentation-padding:26px;--se-list-item-border-bottom:none}:host(.headline){--se-list-group-height:48px;--se-list-group-background:var(--se-alternative-hover)}\";\n\nconst ListComponent = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * Defines the style of the list.  The default setting is `classic`.\n     */\n    this.option = 'classic';\n    /**\n     * Defines if the list element should be selected or not.\n     */\n    this.selectedColor = 'standard';\n    /**\n     * Defines if list groups can be collapsed.  The default setting is `true`.\n     */\n    this.canCollapse = true;\n  }\n  optionDidChange() {\n    Array.from(this.el.querySelectorAll('se-list-item, se-list-group')).forEach((item) => {\n      const closeList = item.closest('se-list');\n      // Make sure we only change the style of the current list. Handy if list has a dropdown with a different list style\n      if (closeList === this.el) {\n        item.setOption(this.option);\n      }\n    });\n  }\n  canCollapseDidChange() {\n    Array.from(this.el.querySelectorAll('se-list-group')).forEach((item) => {\n      item.canCollapse = this.canCollapse;\n    });\n  }\n  handleKeyDown(ev) {\n    switch (ev.key) {\n      case 'ArrowUp': {\n        this.focusElement(-1);\n        break;\n      }\n      case 'ArrowDown': {\n        this.focusElement(+1);\n        break;\n      }\n      case 'ArrowLeft':\n      case 'ArrowRight': {\n        // ev.preventDefault();\n        const elm = document.activeElement;\n        if (elm.nodeName.toUpperCase() === 'SE-LIST-GROUP') {\n          elm.toggleCollapseTreeview();\n        }\n        break;\n      }\n    }\n  }\n  focusElement(step) {\n    // add all elements we want to include in our selection\n    const elms = Array.from(this.el.querySelectorAll('se-list-group, se-list-item'));\n    const visibles = elms.filter(item => isVisible(item, true, true));\n    const index = visibles.findIndex(el => el === document.activeElement);\n    const nextStep = Math.min(Math.max(0, index + step), visibles.length);\n    visibles[nextStep].focusElement();\n  }\n  componentWillLoad() {\n    this.optionDidChange();\n    this.canCollapseDidChange();\n  }\n  render() {\n    const selectedColor = this.option === 'nav' ? 'primary' : this.selectedColor;\n    return (h(Host, { role: \"list\", class: {\n        [this.option]: true,\n        [`selected-${selectedColor}`]: true,\n      } }, h(\"slot\", null)));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"option\": [\"optionDidChange\"],\n    \"canCollapse\": [\"canCollapseDidChange\"]\n  }; }\n};\nListComponent.style = listCss;\n\nconst listGroupCss = \":host{-webkit-box-direction:normal;-webkit-box-orient:vertical;-webkit-flex-direction:column;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;display:-ms-flexbox;display:-webkit-flex;display:flex}se-list-item{background-color:var(--se-list-group-background);font-weight:var(--se-list-group-font-weight);--se-list-item-height:var(--se-list-group-height)}.group-item{--se-list-group-indentation:0;overflow:unset;list-style-type:none;margin:0;-ms-flex:1;flex:1}.selectedChild{--se-list-item-selected-background:transparent}.collapsed{display:none}.treeview-icon{margin-left:-8px;margin-right:-8px}\";\n\nconst ListGroupComponent = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.didGroupClick = createEvent(this, \"didGroupClick\", 7);\n    this.didGroupCollapse = createEvent(this, \"didGroupCollapse\", 7);\n    /**\n     * Defines if the item group is collapsed/closed. The default setting is `false`.\n     */\n    this.collapsed = false;\n    /**\n     * Defines the group indentation to add paddings to the list item (used with multiple list groups).\n     */\n    this.indentation = 1;\n    /**\n     * Defines if list groups can be collapsed, true by default.\n     */\n    this.canCollapse = true;\n  }\n  collapsedChanged() {\n    this.checkSelected();\n  }\n  ChildUpdated() {\n    this.checkSelected();\n  }\n  async toggleCollapseTreeview() {\n    this.toggleItems();\n  }\n  async focusElement() {\n    this.listItem.focusElement();\n  }\n  async setOption(option) {\n    this.isTreeview = option === 'treeview';\n  }\n  checkSelected() {\n    if (!this.collapsed) {\n      this.selectedChild = false;\n    }\n    else {\n      // TODO: make sure it work if we have a list inside a list...\n      Array.from(this.el.querySelectorAll('se-list-item, se-list-group')).forEach((item) => {\n        if (item.selected || item.selectedChild) {\n          this.selectedChild = true;\n          return;\n        }\n      });\n    }\n  }\n  toggleGroupButton() {\n    if (!this.isTreeview) {\n      this.toggleItems();\n    }\n    else if (this.listItem) {\n      this.listItem.blurElement();\n    }\n    this.didGroupClick.emit(true);\n  }\n  toggleItems() {\n    this.collapsed = !this.collapsed;\n    this.didGroupCollapse.emit({ collapsed: this.collapsed });\n  }\n  getClosestParent(selector) {\n    return this.el.parentElement && this.el.parentElement.closest(selector);\n  }\n  getParentConfig() {\n    const closestList = this.getClosestParent('se-list');\n    if (closestList === null || closestList === void 0 ? void 0 : closestList.option) {\n      this.isTreeview = closestList.option === 'treeview';\n    }\n    const closestGroup = this.getClosestParent('se-list, se-list-group');\n    if (closestGroup === null || closestGroup === void 0 ? void 0 : closestGroup.indentation) {\n      this.indentation = closestGroup.indentation + 1;\n    }\n  }\n  componentWillLoad() {\n    this.getParentConfig();\n    this.checkSelected();\n  }\n  componentDidLoad() {\n    this.groupItem.style.setProperty('--se-list-group-indentation', `${this.indentation}`);\n  }\n  render() {\n    let title = this.item;\n    if (!!this.description) {\n      title = `${title}, ${this.description}`;\n    }\n    const id = this.el.getAttribute('id');\n    return (h(Host, { role: \"listitem\", style: { flex: `${!this.collapsed && this.flex ? this.flex : 0}` } }, h(\"se-list-item\", { id: id ? `group-${id}` : null, ref: el => (this.listItem = el), \"aria-expanded\": this.collapsed, onClick: () => this.toggleGroupButton(), class: {\n        selectedChild: !this.selected && this.selectedChild,\n      }, selected: this.selectedChild || this.selected, disabled: this.disabled, icon: this.icon, title: title, description: this.description, item: this.item }, this.isTreeview ? (h(\"se-icon\", { slot: \"start\", class: \"treeview-icon\", size: \"medium\", color: \"standard\", onClick: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.toggleCollapseTreeview();\n      }, rotate: this.collapsed ? 90 : 180 }, h(\"span\", { innerHTML: arrow2Up }))) : (''), h(\"slot\", { name: \"start\", slot: \"start\" }), h(\"slot\", { name: \"icon\", slot: \"icon\" }), h(\"slot\", { name: \"item\", slot: \"item\" }), h(\"slot\", { name: \"description\", slot: \"description\" }), h(\"slot\", { name: \"end\", slot: \"end\" }), !this.isTreeview && this.canCollapse ? (h(\"se-icon\", { slot: \"end\", size: \"medium\", color: \"standard\", rotate: this.collapsed ? 180 : 0 }, h(\"span\", { innerHTML: arrow2Up }))) : ('')), h(\"div\", { ref: el => (this.groupItem = el), role: \"list\", class: { 'group-item': true, collapsed: this.collapsed } }, h(\"slot\", null))));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"collapsed\": [\"collapsedChanged\"]\n  }; }\n};\nListGroupComponent.style = listGroupCss;\n\nconst listItemCss = \".button{border:none;margin:0;overflow:none;position:relative;width:-webkit-fill-available;max-width:100%;min-width:100%;background-color:inherit;color:var(--se-background-alternative-contrast);font:inherit;padding-left:calc( var(--se-list-group-indentation) * var(--se-list-item-indentation-padding) );min-height:var(--se-list-item-height);border-bottom:var(--se-list-item-border-bottom);-webkit-box-sizing:border-box;box-sizing:border-box;display:-ms-flexbox;display:-webkit-flex;display:flex;-webkit-box-align:center;-ms-flex-align:center;-webkit-align-items:center;-moz-align-items:center;align-items:center;text-align:left;text-align:start;border-bottom-color:#e6e6e6;border-bottom-color:var(--se-divider);text-decoration:none;cursor:default}.button.selected{background-color:var(--se-list-item-selected-background);color:var(--se-list-item-selected-color)}.button:not([disabled]),.button:not(.disabled){cursor:pointer}.button:not([disabled]):hover,.button:not(.disabled):hover{background-color:#e6e6e6;background-color:var(--se-alternative-hover, #e6e6e6);color:#0f0f0f;color:var(--se-alternative-contrast, #0f0f0f)}.button:focus{outline-width:2px;outline-offset:-1px;outline-color:#007acd;outline-color:var(--se-button-focus, #007acd);outline-style:solid}.selectedBar{position:absolute;top:0;bottom:0;left:0;width:5px;background-color:var(--se-list-item-selected-bar)}.start{margin:0;margin-left:8px;display:-ms-flexbox;display:-webkit-flex;display:flex}.content{min-width:0;padding:0 4px;margin:0;overflow:hidden;-webkit-box-flex:1;-webkit-flex:1 1 auto;-moz-box-flex:1;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;display:-ms-flexbox;display:-webkit-flex;display:flex;-webkit-box-direction:normal;-webkit-box-orient:vertical;-webkit-flex-direction:column;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:start center;-ms-flex-align:start center;-webkit-align-items:start center;-moz-align-items:start center;align-items:start center;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.content div,.content small{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.content .list-item-label{line-height:24px}.content small{font-size:14px;line-height:14px}\";\n\nconst ListItemComponent = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.didSelectedChange = createEvent(this, \"didSelectedChange\", 7);\n  }\n  SelectedDidChange() {\n    this.didSelectedChange.emit();\n  }\n  // paddingIndentation = 24;\n  async focusElement() {\n    this.buttonElm.focus();\n  }\n  async blurElement() {\n    this.buttonElm.blur();\n  }\n  async setOption(option) {\n    this.showNavIcon = option === 'nav';\n  }\n  getClosestParent() {\n    // get the closest between se-list or se-list-group\n    return this.el.parentElement && this.el.parentElement.closest('se-list');\n  }\n  getParentConfig() {\n    const closest = this.getClosestParent() || {};\n    if (closest.option && closest.option === 'nav') {\n      this.showNavIcon = true;\n    }\n  }\n  componentWillLoad() {\n    this.getParentConfig();\n  }\n  render() {\n    let myDescription = null;\n    let title = this.item;\n    if (!!this.description) {\n      myDescription = h(\"small\", null, this.description);\n      title = `${title}, ${this.description}`;\n    }\n    const id = this.el.getAttribute('id');\n    const TagType = this.href === undefined ? 'button' : 'a';\n    const attrs = {};\n    if (TagType === 'a') {\n      attrs.href = this.href;\n    }\n    return (h(TagType, Object.assign({ role: \"listitem\", onClick: () => this.buttonElm.blur() }, attrs, { ref: el => (this.buttonElm = el), title: title, class: {\n        selected: this.selected,\n        button: true,\n        disabled: this.disabled,\n      }, id: id ? `wc-${id}` : '' }), this.selected ? h(\"div\", { class: \"selectedBar\" }) : '', h(\"div\", { class: \"start\" }, h(\"slot\", { name: \"start\" }), !!this.icon ? (h(\"se-icon\", { color: this.iconColor }, this.icon)) : (''), h(\"slot\", { name: \"icon\" })), h(\"div\", { class: \"content\" }, h(\"div\", { class: \"list-item-label\" }, this.item, h(\"slot\", { name: \"item\" })), h(\"small\", null, myDescription), h(\"slot\", { name: \"description\" })), h(\"slot\", null), h(\"slot\", { name: \"end\" }), this.showNavIcon ? (h(\"se-icon\", { size: \"medium\", color: \"standard\" }, h(\"span\", { innerHTML: arrow2Right }))) : ('')));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"selected\": [\"SelectedDidChange\"]\n  }; }\n};\nListItemComponent.style = listItemCss;\n\nexport { ListComponent as se_list, ListGroupComponent as se_list_group, ListItemComponent as se_list_item };\n"],"sourceRoot":"webpack:///"}